{"version":3,"sources":["App.js","utils.js","reportWebVitals.js","index.js","index.module.scss"],"names":["filterOptionMap","recordList","keyValueMap","record","key","Set","add","parseRecord","rawDataList","App","useState","currentSpecies","setCurrentSpecies","currentType","setCurrentType","currentSubType","setCurrentSubType","currentGene","setCurrentGene","currentMethod","setCurrentMethod","tableData","setTableData","className","ScopedStyle","showSearch","placeholder","optionFilterProp","style","width","value","onChange","allowClear","filterOption","input","option","label","toLowerCase","indexOf","options","map","val","type","onClick","resList","filter","rawData","species","subtype","gene","method","dataSource","columns","Object","keys","title","dataIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cc8e827e.chunk.js","sourcesContent":["import \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { Select, Button, Table } from \"antd\";\nimport { parseRecord } from \"./utils\";\nimport { marker as rawDataList } from \"./data/data.json\";\nimport ScopedStyle from \"./index.module.scss\";\n\nconst filterOptionMap = parseRecord(rawDataList);\n\n// species, type, subtype,gene,method\nfunction App() {\n  const [currentSpecies, setCurrentSpecies] = useState();\n  const [currentType, setCurrentType] = useState();\n  const [currentSubType, setCurrentSubType] = useState();\n  const [currentGene, setCurrentGene] = useState();\n  const [currentMethod, setCurrentMethod] = useState();\n  const [tableData, setTableData] = useState(rawDataList);\n  const goFilter = () => {\n    const resList = rawDataList.filter(\n      (rawData) =>\n        (!currentSpecies || rawData.species === currentSpecies) &&\n        (!currentType || rawData.type === currentType) &&\n        (!currentSubType || rawData.subtype === currentSubType) &&\n        (!currentGene || rawData.gene === currentGene) &&\n        (!currentMethod || rawData.method === currentMethod)\n    );\n    setTableData(resList);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={ScopedStyle[\"container\"]}>\n        <div className={ScopedStyle[\"filter-option\"]}>\n          <div className={ScopedStyle[\"option\"]}>\n            <span className={ScopedStyle[\"label\"]}>species</span>\n            <Select\n              showSearch\n              placeholder=\"Not Defined\"\n              optionFilterProp=\"children\"\n              style={{ width: 120 }}\n              value={currentSpecies}\n              onChange={(value) => setCurrentSpecies(value)}\n              allowClear\n              filterOption={(input, option) =>\n                option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              options={filterOptionMap[\"species\"].map((val) => ({\n                label: val,\n                value: val,\n              }))}\n            ></Select>\n          </div>\n\n          <div className={ScopedStyle[\"option\"]}>\n            <span className={ScopedStyle[\"label\"]}>type</span>\n            <Select\n              showSearch\n              placeholder=\"Not Defined\"\n              style={{ width: 120 }}\n              value={currentType}\n              onChange={(value) => setCurrentType(value)}\n              allowClear\n              filterOption={(input, option) =>\n                option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              options={filterOptionMap[\"type\"].map((val) => ({\n                label: val,\n                value: val,\n              }))}\n            />\n          </div>\n\n          <div className={ScopedStyle[\"option\"]}>\n            <span className={ScopedStyle[\"label\"]}>subtype</span>\n            <Select\n              showSearch\n              placeholder=\"Not Defined\"\n              style={{ width: 240 }}\n              value={currentSubType}\n              onChange={(value) => setCurrentSubType(value)}\n              allowClear\n              filterOption={(input, option) =>\n                option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              options={filterOptionMap[\"subtype\"].map((val) => ({\n                label: val,\n                value: val,\n              }))}\n            />\n          </div>\n\n          <div className={ScopedStyle[\"option\"]}>\n            <span className={ScopedStyle[\"label\"]}>gene</span>\n            <Select\n              showSearch\n              placeholder=\"Not Defined\"\n              style={{ width: 120 }}\n              value={currentGene}\n              onChange={(value) => setCurrentGene(value)}\n              allowClear\n              filterOption={(input, option) =>\n                option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              options={filterOptionMap[\"gene\"].map((val) => ({\n                label: val,\n                value: val,\n              }))}\n            />\n          </div>\n\n          <div className={ScopedStyle[\"option\"]}>\n            <span className={ScopedStyle[\"label\"]}>method</span>\n            <Select\n              showSearch\n              placeholder=\"Not Defined\"\n              style={{ width: 120 }}\n              value={currentMethod}\n              onChange={(value) => setCurrentMethod(value)}\n              allowClear\n              filterOption={(input, option) =>\n                option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n              options={filterOptionMap[\"method\"].map((val) => ({\n                label: val,\n                value: val,\n              }))}\n            />\n          </div>\n\n          <div className={ScopedStyle[\"submit\"]}>\n            <Button type=\"primary\" onClick={goFilter}>\n              Filter\n            </Button>\n          </div>\n        </div>\n        <div className={ScopedStyle[\"data-table\"]}>\n          <Table\n            dataSource={tableData}\n            width={\"80%\"}\n            columns={Object.keys(filterOptionMap).map((key) => ({\n              title: key,\n              dataIndex: key,\n              key,\n            }))}\n          ></Table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * @typedef {Object} Record\n * @property {string} species\n * @property {string} type\n * @property {string} subtype\n * @property {string} gene\n * @property {string} article\n * @property {string} method\n * */\n\n/**@param {Record[]} recordList */\nconst parseRecord = (recordList) => {\n  /**@type {{[key:string]:Set<string>}} */\n  const keyValueMap = {};\n  for (const record of recordList) {\n    for (const key in record) {\n      keyValueMap[key] = keyValueMap[key] || new Set();\n      keyValueMap[key].add(record[key]);\n    }\n  }\n\n  for (const key in keyValueMap) {\n    keyValueMap[key] = [...keyValueMap[key]];\n  }\n\n  return keyValueMap;\n};\n\nexport { parseRecord };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"src_container__2-OxP\",\"filter-option\":\"src_filter-option__4B6-1\",\"option\":\"src_option___RPtK\",\"label\":\"src_label__-iP2k\",\"data-table\":\"src_data-table__t_ggY\"};"],"sourceRoot":""}